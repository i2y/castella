{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Castella is a pure Python cross-platform UI framework made for us Pythonista.</p>"},{"location":"#why","title":"Why","text":"<p>Dart has Flutter and Kotlin has Compose Multiplatform as cross-platform declarative UI frameworks. These frameworks describe the core parts of the framework in that language itself. They also make programmers to be able to define UI declaratively in that language, not XML, HTML, or something like their own languages. Probably, those would be very us programmer friendly and enhance our productivity. Unfortunately, at this moment (May 2022), at least as far as I know, there doesn't seem to be such a framework in Python. Castella is an attempt to see if such a thing can be made for us Pythonista in Python.</p>"},{"location":"#goals","title":"Goals","text":"<p>The primary final goal of Castella is to provide features for Python programmers easy to create a UI application for several OS platforms and web browsers in a single most same code as possible as. The second goal is to provide a UI framework that Python programmers can easily understand, modify, and extend as needed.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>The core part as a UI framework of Castella is written in only Python. It's not a wrapper for existing something written in other programing languages. \"pure Python cross-platform UI framework\" specifies things like the above.</li> <li>Castella allows pythonista to define UI declaratively in Python.</li> <li>Castella provides hot-reloading or hot-restarting on development.</li> <li>Dark mode is supported. If the runtime environment is in dark mode, Castella app's UI appearance will automatically be styled in dark mode.</li> <li>Castella utilizes GPU via dependent libraries.</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>For desktop platforms, Castella is standing on existing excellent python bindings for window management library (GLFW or SDL2) and 2D graphics library (Skia).</li> <li>For web browsers, Castella is standing on awesome Pyodide/PyScript and CanvasKit (Wasm version of Skia).</li> <li>For terminals, Castella is standing on prompt_toolkit.</li> </ul>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>Currently, Castella theoretically should support not-too-old versions of the following platforms.</p> <ul> <li>Windows 10/11</li> <li>Mac OS X</li> <li>Linux</li> <li>Web browsers</li> <li>Terminals</li> </ul>"},{"location":"chart/","title":"Chart","text":"<p>dummy</p>"},{"location":"custom-widgets/","title":"Custom Widgets","text":"<p>You can combine built-in widgets to create a custom widget. It is defined as a subclass of Component or a subclass of Stateful Component. (You can also define custom widgets without combining existing widgets, but that's another story.)</p>"},{"location":"custom-widgets/#component","title":"Component","text":"<p>Component is a custom widget that doesn\u2019t have the state of the component as a whole.</p> <p>This is an example code for counter component.</p> <pre><code>class Counter(Component):\n    def __init__(self):\n        super().__init__()\n        self._count = State(0)\n\n    def view(self):\n        return Column(\n            Text(self._count),\n            Row(\n                Button(\"Up\", font_size=50).on_click(self.up),\n                Button(\"Down\", font_size=50).on_click(self.down),\n            ),\n        )\n\n    def up(self, _):\n        self._count += 1\n\n    def down(self, _):\n        self._count -= 1\n</code></pre> <p>This counter component has count state as an instance variable. However, it is bound only to the child text widget, not to the state of this component. Therefore, there is no need to even make it an instance variable if the encapsulation of the count state is unnecessary.</p> <p>When this state is changed, only the child text widget is re-rendered, and the entire component is not re-rendered. On the other hand, a stateful component binds specific states to components. When that state changes, the entire component is re-rendered according to the content of the view method. If you need to re-render the entire component when something changes, you should use a StatefulComponent.</p> <p>Here is an example of the counter app written without instance variables. Either way of writing is fine.</p> <pre><code>class Counter(Component):\n\u00a0 \u00a0 def view(self):\n\u00a0 \u00a0 \u00a0 \u00a0 count = State(0)\n\u00a0 \u00a0 \u00a0 \u00a0 up = lambda _: count.set(count() + 1)\n\u00a0 \u00a0 \u00a0 \u00a0 down = lambda _: count.set(count() - 1)\n\u00a0 \u00a0 \u00a0 \u00a0 return Column(\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Text(count),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Row(\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Button(\"+\", font_size=50).on_click(up),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Button(\"-\", font_size=50).on_click(down),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ),\n\u00a0 \u00a0 \u00a0 \u00a0 )\n</code></pre>"},{"location":"custom-widgets/#stateful-component","title":"Stateful Component","text":"<p>Stateful Component is a custom widget that has state as the component.</p> <p>Here is an example of a numeric list component. This component is a stateful component.</p> <pre><code>class NumList(StatefulComponent):\n\u00a0 \u00a0 def __init__(self, n: State[int]):\n\u00a0 \u00a0 \u00a0 \u00a0 super().__init__(n)\n\u00a0 \u00a0 \u00a0 \u00a0 self._num: State[int] = n\n\n  \u00a0 def view(self):\n\u00a0 \u00a0 \u00a0 \u00a0 return Column(\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Button(\u201cAdd\u201d).fixed_height(40).on_click(lambda _: self.num.set(self._num() + 1)),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0*(Text(i + 1).fixed_height(40) for i in range(self._num())),\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0scrollable=True,\n\u00a0 \u00a0 \u00a0 \u00a0 )\n\nApp(Frame(\"NumList\"), NumList(State(1))).run()\n</code></pre> <p>This component adds a new text with number when the Add button is clicked. It has an underscore num instance variable as state. It must also be passed to the constructor of the state component class. In this way, the view of the entire NumList is updated when the value of <code>_num</code> instance variable is updated. In other words, it\u2019s like that the entire view method is reexecuted on updating the state of component.</p>"},{"location":"getting-started/","title":"Installation","text":""},{"location":"getting-started/#prerequisite","title":"Prerequisite","text":"<p>Castella requires the version of Python &gt;= <code>3.11</code>.</p>"},{"location":"getting-started/#for-desktop","title":"For Desktop","text":"<p>Castella for Desktop depends on either GLFW or SDL2, so the installation method of Castella differs slightly depending on which one is used. I recommend using GLFW since Castella with GLFW currently performs better.</p> <p>In any case, Castella installation is usually completed with a single <code>pip install</code>.</p>"},{"location":"getting-started/#in-case-of-using-castella-with-glfw","title":"In case of using Castella with GLFW","text":"<p>You can install Castella from PyPI with the following command. <pre><code>$ pip install castella[glfw]\n</code></pre></p> <p>Instead using PyPI, to install the latest Castella source code from GitHub, you can execute the following command. <pre><code>$ pip install \"git+https://github.com/i2y/castella.git\"[glfw]\n</code></pre></p> <p>If you run the above command in PowerShell on Windows it may fail. In that case, please clone the git repository as follows and then do <code>pip install .[glfw]</code>. <pre><code>$ git clone git+https://github.com/i2y/castella.git\n$ cd castella\n$ pip install .[glfw]\n</code></pre></p>"},{"location":"getting-started/#if-you-want-to-install-another-glfw-shared-library","title":"If you want to install another GLFW shared library","text":"<p>GLFW shared library itself would be installed with the above command, but if you'd like to install another GFLW shared library, you can do it as well. Also, the only <code>pip install castella[glfw]</code> may cause glfw-related errors. In that case, please try additionally this installation procedure.</p> <p>For Windows/Mac/Linux, you can download and use precompiled version from this page. Please follow its instructions to install.</p> <p>For Mac and Linux, you can also install using a package manager.</p> <p>Mac</p> <pre><code>$ brew install glfw3\n</code></pre> <p>Linux</p> <p><pre><code>$ sudo apt-get install -y libglfw3-dev\n</code></pre> or <pre><code>$ sudo yum install -y libglfw3-dev\n</code></pre></p>"},{"location":"getting-started/#in-case-of-using-castella-with-sdl2","title":"In case of using Castella with SDL2","text":"<p>You can install Castella from PyPI with the following command. <pre><code>$ pip install castella[sdl]\n</code></pre></p> <p>Instead using PyPI, to install the latest Castella source code from GitHub, you can execute the following command. <pre><code>$ pip install \"git+https://github.com/i2y/castella.git\"[sdl]\n</code></pre></p> <p>If you run the above command in PowerShell on Windows it may fail. In that case, please clone the git repository as follows and then do <code>pip install .[sdl]</code>. <pre><code>$ git clone git+https://github.com/i2y/castella.git\n$ cd castella\n$ pip install .[sdl]\n</code></pre></p>"},{"location":"getting-started/#if-you-want-to-install-another-sdl2-shared-library","title":"If you want to install another SDL2 shared library","text":"<p>SDL2 shared library itself would be installed with the above command, but if you'd like to install another SDL2 shared library, you can do it as well.</p> <p>You can download and use precompiled version from this page.</p> <p>After downloading and storing it, please set the installed folder path to the environment variable <code>PYSDL2_DLL_PATH</code>. (For more information on how PySDL2 finds SDL2 DLL, see this page.)</p>"},{"location":"getting-started/#confirmation-of-successful-installation","title":"Confirmation of successful installation","text":"<p>If the installation was successful, then hello_world.py, calc.py, etc. under the examples folder will work.</p>"},{"location":"getting-started/#for-web-browsers","title":"For Web Browsers","text":"<p>Here, we are going to explain how to use Castella in your PyScript app.</p> <p>For more information on how to write a PyScript app, please refer to the official documentation.</p> <p>For now, to use Castella on an html page, you need to do something as the following.</p> <ul> <li>Load the pyscript JS file and the canvaskit JS file and initialize it properly in your html</li> <li>Specify all Castella modules to be used in the html page in pyscript config file (<code>pyscript.toml</code>)</li> <li>Serve the html page and modules with any web server.</li> </ul> <p>A tiny example of the above procedure is shown below.</p>"},{"location":"getting-started/#1-create-your-app-folder","title":"1. Create your app folder","text":"<pre><code>$ mkdir counter\n</code></pre>"},{"location":"getting-started/#2-clone-castella-repository","title":"2. Clone Castella repository","text":"<pre><code>$ cd counter\n$ git clone git@github.com:i2y/castella.git\n</code></pre>"},{"location":"getting-started/#3-implement-your-app","title":"3. Implement your app","text":"<p>You need to create <code>counter.html</code> file with the following content in your app folder. <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Misc&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://pyscript.net/releases/2024.4.1/core.css\"&gt;\n    &lt;script type=\"module\" src=\"https://pyscript.net/releases/2024.4.1/core.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/canvaskit-wasm@0.33.0/bin/canvaskit.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type=\"py\" src=\"counter.py\" config=\"pyscript.toml\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Then, you need to write <code>pyscript.toml</code> file with the following content in your app folder. <pre><code>packages = [ \"./castella-0.1.13-py3-none-any.whl\" ]\n</code></pre></p> <p>Next, off course, you need to create <code>counter.py</code> file with the following content in your app folder. <pre><code>from castella import App, Button, Column, Component, Row, State, Text\nfrom castella.frame import Frame\n\n\nclass Counter(Component):\n    def __init__(self):\n        super().__init__()\n        self._count = State(0)\n\n    def view(self):\n        return Column(\n            Text(self._count),\n            Row(\n                Button(\"Up\", font_size=50).on_click(self.up),\n                Button(\"Down\", font_size=50).on_click(self.down),\n            ),\n        )\n\n    def up(self, _):\n        self._count += 1\n\n    def down(self, _):\n        self._count -= 1\n\n\nif __name__ == \"__main__\":\n    App(Frame(\"Counter\", 800, 600), Counter()).run()\n</code></pre></p>"},{"location":"getting-started/#4-serve-your-app","title":"4. Serve your app","text":"<p>Finally, could please serve your app using http server. <pre><code>$ python -m http.server 3000\n</code></pre> Now, you can see the UI of counter app at http://127.0.0.1:3000/counter.html using any web browser. That will be shown as the following.</p> <p>The above counter app is emmbeded in an iframe.</p>"},{"location":"getting-started/#for-terminals","title":"For Terminals","text":"<p>You can install Castella from PyPI with the following command. <pre><code>$ pip install castella[tui]\n</code></pre></p> <p>If you install other platform specific packages, when you want to use Castella with TUI, you need to specify the environment variable <code>CASTELLA_IS_TERMINAL_MODE</code> as follows.</p> <pre><code>$ CASTELLA_IS_TERMINAL_MODE=true python your_script.py\n</code></pre> <p>If you use PowerShell on Windows, you can set the environment variable as follows. <pre><code>$env:CASTELLA_IS_TERMINAL_MODE=\"true\"; python your_script.py\n</code></pre></p> <p>If you don't install any other platform specific packages, you can use Castella with TUI without specifying the environment variable. It will be automatically executed in terminal mode.</p>"},{"location":"hello-world/","title":"Hello World","text":""},{"location":"hello-world/#example-1","title":"Example 1","text":"<p>Here you will create a UI that just displays \"Hello World!\". For that, you need to use App, Frame and Text.</p> <ul> <li>App: Class that has the execution loop of an application</li> <li>Frame: Class representing the frame of the application window</li> <li>Text: Single-line text widget</li> </ul> <p>The code is as follows.</p> <pre><code>from castella import App, Text\nfrom castella.frame import Frame\n\nApp(Frame(\"Hello world\", 480, 300),\u3000  # (1)\n    Text(\"Hello World!\")).run()\u3000  # (2)\n</code></pre> <ol> <li>Set the title of the Frame=Window of this app to \"Hello world\" and the size to 480 wide and 300 high.</li> <li>Initialize App by passing a Frame instance and a top-level widget (in this case, Text) to App constructor as a top-level widget, then call the run method; to run the App, you must finally call run after setting up the screen and event handlers.</li> </ol> <p>You will see a screen similar to the one below with executing this.</p> <p>This is an screen shot of the result of running the above in dark mode.</p> <p>In Castella, each widgets are automatically scaled to fit the size of the parent (in this case, the frame) by default. Also, actual text inside of Text widget is rendered scaled to fit the size of the Text widget by default and is aligned to the center by default.</p>"},{"location":"hello-world/#example-2","title":"Example 2","text":"<p>This is an example of fixing the font size to a specified size, regardless of the size of the Text widget and Frame.</p> <pre><code>App(Frame(\"Hello world\", 480, 300),\n    Text(\"Hello World!\", font_size=20)).run()\n</code></pre> <p>In addition, here is an example that the alignment of the actual text is left side. You can specify that with <code>align=TextAlign.LEFT</code>.</p> <pre><code>App(Frame(\"Hello world\", 480, 300),\n    Text(\"Hello World!\", font_size=20, align=TextAlign.LEFT)).run()\n</code></pre> <p><code>TextAlign.RIGHT</code> can also be specified.</p>"},{"location":"hello-world/#example-3","title":"Example 3","text":"<p>This example makes a text widget itself a fixed size.</p> <pre><code>App(Frame(\"Hello world\", 480, 300),\n    Text(\"Hello World!\").fixed_size(100, 200)).run()\n</code></pre> <p>The next chapter describes Layout.</p>"},{"location":"hot-reloading/","title":"Hot reloading","text":"<p>dummy</p>"},{"location":"hot-restarting/","title":"Hot restarting","text":"<p>dummy</p>"},{"location":"layout/","title":"Layout","text":""},{"location":"layout/#container-widget","title":"Container Widget","text":"<p>Castella has three container widgets for UI layout; Column, Row and Box.</p>"},{"location":"layout/#column","title":"Column","text":"<p>Column aligns child elements vertically like this and the code looks like this.</p> <pre><code>Column(\n  Text(\"First\", font_size=24),\n  Text(\"Second\", font_size=24),\n\u00a0 Text(\"Third\", font_size=24),\n)\n</code></pre>"},{"location":"layout/#row","title":"Row","text":"<p>Row aligns child elements horizontally like this and the code is this.</p> <pre><code>Row(\n  Text(\"First\", font_size=24),\n  Text(\"Second\", font_size=24),\n\u00a0 Text(\"Third\", font_size=24),\n)\n</code></pre>"},{"location":"layout/#box","title":"Box","text":"<p>Box takes only one child. If the child size is bigger than the parent box, the parent box provides scrollbars automatically. (By the way, if you set scrollable=True for Column or Row, a scrollbar will appear when the child elements do not fit within the view.)</p> <pre><code>Box(\n  Text(\"Content\", font_size=24).fixed_size(400, 400),\n)\n</code></pre>"},{"location":"layout/#size-policy","title":"Size Policy","text":"<p>Each widget has size policies for each width and height. There are three types of policies that can be specified.</p> <ul> <li>Expanding: maximum size that will fit in the parent widget</li> <li>Fixed Size: specified size</li> <li>Content: size according to the content (e.g., for text, according to the size of that text)</li> </ul> <p>The default policy is different depending on the kind of widget, but it is basically \u201cExpanding\u201d for both width and height.</p> <p>For example, in the Row example above, the width policy of each Text widget is \u201cExpanding\" and the height policy is \"Expanding\u201d.</p> <pre><code>Row(\n  Text(\"First\", font_size=24),\n  Text(\"Second\", font_size=24),\n\u00a0 Text(\"Third\", font_size=24),\n)\n</code></pre> <p>In this case, the width of each Text widget is expanded to the width of the parent Row widget and share their width equally, and the height of each Text widget is expanded to the height of the parent Row widget.</p> <p>The code above is same with the code below written without omission of the size policy setting.</p> <pre><code>Row(\n  Text(\"First\", font_size=24).WidthPolicy(SizePolicy.Expanding)\n                             .HeightPolicy(SizePolicy.Expanding),\n  Text(\"Second\", font_size=24).WidthPolicy(SizePolicy.Expanding)\n                              .HeightPolicy(SizePolicy.Expanding),\n  Text(\"Third\", font_size=24).WidthPolicy(SizePolicy.Expanding)\n                             .HeightPolicy(SizePolicy.Expanding),\n)\n</code></pre>"},{"location":"layout/#flex","title":"Flex","text":"<p>By specifying \"flex\" you can specify each widget's occupied ratio for the overall size in the parent widget.</p> <pre><code>Row(\n  Text(\"First\", font_size=24).flex(1),\n  Text(\"Second\", font_size=24).flex(2),\n\u00a0 Text(\"Third\", font_size=24).flex(1),\n)\n</code></pre> <p>In this example above, the width of the entire row is divided in the ratio 1:2:1.</p>"},{"location":"layout/#mix-of-various-size-policies","title":"Mix of various size policies","text":"<p>Of course, you can mix multiple size policies for the children of a single parent widget.</p> <pre><code>Row(\n  Text(\"First\", font_size=24).fixed_size(100, 50),\n  Text(\"Second\", font_size=24).flex(2),\n\u00a0 Text(\"Third\", font_size=24).flex(1),\n)\n</code></pre> <p>In this example, the first element is displayed at the specified fixed size. The remaining two child elements share the remaining width in 2:1 ratio.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Yasushi Itoh</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"packaging/","title":"Packaging a app made with castella","text":""},{"location":"state/","title":"State","text":"<p>dummy</p>"},{"location":"style/","title":"Style","text":"<p>TODO</p>"},{"location":"widgets/","title":"Built-in Widgets","text":""},{"location":"widgets/#button","title":"Button","text":"<pre><code>App(\n    Frame(\"Button\"),\n    Row(\n        Column(\n            Button(\"First\"),\n            Button(\"Second\", align=TextAlign.CENTER),\n            Button(\"Third\", align=TextAlign.RIGHT),\n            Button(\"Fourth\", align=TextAlign.LEFT),\n        ).spacing(10)\n    ).spacing(10),\n).run()\n</code></pre>"},{"location":"widgets/#text","title":"Text","text":"<pre><code>App(\n    Frame(\"Button\"),\n    Row(\n        Column(\n            Text(\"First\", kind=Kind.NORMAL),\n            Text(\"Second\", kind=Kind.INFO, align=TextAlign.CENTER),\n            Text(\"Third\", kind=Kind.SUCCESS, align=TextAlign.RIGHT),\n            Text(\"Fourth\", kind=Kind.WARNING, align=TextAlign.LEFT),\n            Text(\"Fifth\", kind=Kind.DANGER, align=TextAlign.LEFT),\n        ).spacing(10)\n    ).spacing(10),\n).run()\n</code></pre>"},{"location":"widgets/#switch","title":"Switch","text":"<pre><code>App(\n    Frame(\"Switch\"),\n    Switch(True),\n).run()\n</code></pre>"},{"location":"widgets/#and-more","title":"And more...","text":"<p>This document is WIP. In the future, we will add explanation for more widgets and examples in this document. For now, please see the \"examples\" directory for more widgets and the examples.</p>"}]}